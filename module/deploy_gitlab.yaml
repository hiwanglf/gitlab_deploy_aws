AWSTemplateFormatVersion: "2010-09-09"
Description: Create a gitlab env by AWS


Parameters: 

  # define the area parameters for subnet
  az1nameParameters: 
    Description: please select first AvailabilityZone Name for 0&1 subnet
    Type: "AWS::EC2::AvailabilityZone::Name"
  az2nameParameters: 
    Description: please select second AvailabilityZone Name for 2&3 subnet
    Type: "AWS::EC2::AvailabilityZone::Name"
  CertificateArn:
    Description: The HTTPS Certificates Arn
    Type: String
    Default: arn:aws:acm:ap-northeast-2:510338692548:certificate/39f4695d-20df-4641-9b90-e9a0d66f1316


Resources:

#--------------------------------------------------------------------------------------------
# VPC
#--------------------------------------------------------------------------------------------
  testVpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsSupport: false
      EnableDnsHostnames: false
      InstanceTenancy: default

#--------------------------------------------------------------------------------------------
# Subnet
#--------------------------------------------------------------------------------------------
  public0:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      AvailabilityZone: !Ref az1nameParameters
      VpcId: !Ref testVpc
      CidrBlock: 192.168.0.0/24
  private1:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      AvailabilityZone: !Ref az1nameParameters
      VpcId: !Ref testVpc
      CidrBlock: 192.168.1.0/24
  public2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Ref az2nameParameters
      VpcId: !Ref testVpc
      CidrBlock: 192.168.2.0/24
  private3:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      AvailabilityZone: !Ref az2nameParameters
      VpcId: !Ref testVpc
      CidrBlock: 192.168.3.0/24

#--------------------------------------------------------------------------------------------
# Route Table
#--------------------------------------------------------------------------------------------
  testRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties: 
      VpcId: !Ref testVpc

#--------------------------------------------------------------------------------------------
# Internet Gateway
#--------------------------------------------------------------------------------------------
  testGateway:
    Type: 'AWS::EC2::InternetGateway'
  
#--------------------------------------------------------------------------------------------
# Attachment Internet Gateway to VPC
#--------------------------------------------------------------------------------------------
  testAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref testGateway
      VpcId: !Ref testVpc
  
#--------------------------------------------------------------------------------------------
# Default Route
#--------------------------------------------------------------------------------------------
  testRoute:
    Type: AWS::EC2::Route
    Properties: 
      # default route
      DestinationCidrBlock: 0.0.0.0/0
      # default internet gateway
      GatewayId: !Ref testGateway
      # the routetable we need to configure
      RouteTableId: !Ref testRouteTable

#--------------------------------------------------------------------------------------------
# Route Association to Public Subnet
#--------------------------------------------------------------------------------------------
  subnet0Associaion:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref testRouteTable
      SubnetId: !Ref public0
  subnet2Associaion:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref testRouteTable
      SubnetId: !Ref public2


#--------------------------------------------------------------------------------------------
# RDS Subnet Group
#--------------------------------------------------------------------------------------------
  testRdsSubnet:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: Create RDS Subnet
      DBSubnetGroupName: testRdsSubnetGroup
      SubnetIds: 
        - !Ref private1
        - !Ref private3

#--------------------------------------------------------------------------------------------
# Redis Subnet Group
#--------------------------------------------------------------------------------------------
  testRedisSubnet:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      CacheSubnetGroupName: testRedisSubnetGroup
      Description: Index the private subnet for redis
      SubnetIds:
        - !Ref private1
        - !Ref private3

#--------------------------------------------------------------------------------------------
# ELB Security Group
#--------------------------------------------------------------------------------------------
  # Create Security Group for ELB
  testElbSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: testElbSecGroup
      GroupDescription: elb sec group, permit 0.0.0.0/0 access 443 port 
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref testVpc
#--------------------------------------------------------------------------------------------
# EC2 Security Group
#--------------------------------------------------------------------------------------------
  testEc2SecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: testEc2SecGroup
      GroupDescription: ec2 sec group, permit ELB access 443 port 
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref testVpc
#--------------------------------------------------------------------------------------------
# RDS Security Group
#--------------------------------------------------------------------------------------------
  testRdsSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: testRdsSecGroup
      GroupDescription: Rds sec group, permit EC2 access PostgreSQL 5432 port 
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 5432
          ToPort: 5432
          CidrIp: 192.168.1.0/24
        - IpProtocol: "tcp"
          FromPort: 5432
          ToPort: 5432
          CidrIp: 192.168.3.0/24
      VpcId: !Ref testVpc
#--------------------------------------------------------------------------------------------
# Redis Security Group
#--------------------------------------------------------------------------------------------
  testRedisSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: testRedisSecGroup
      GroupDescription: Redis sec group, permit EC2 access PostgreSQL 6379 port 
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 6379
          ToPort: 6379
          CidrIp: 192.168.1.0/24
        - IpProtocol: "tcp"
          FromPort: 6379
          ToPort: 6379
          CidrIp: 192.168.3.0/24
      VpcId: !Ref testVpc


#--------------------------------------------------------------------------------------------
# ELB 
#--------------------------------------------------------------------------------------------
  testElb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: testElb
      Scheme: internet-facing 
      SecurityGroups: 
        - Ref: testElbSecGroup
      Subnets:
        - Ref: public0
        - Ref: public2
      Type: application
#--------------------------------------------------------------------------------------------
# ELB target
#--------------------------------------------------------------------------------------------
  testElbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /users/sign_in
      HealthCheckPort: 443
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 4
      Matcher: 
        HttpCode: '200'
      Name: testTargetGroup
      Port: 443
      Protocol: HTTPS
      TargetType: instance
      UnhealthyThresholdCount: 3
      VpcId: !Ref testVpc
#--------------------------------------------------------------------------------------------
# ELB Listener
#--------------------------------------------------------------------------------------------
  testElbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      Certificates: 
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref testElbTargetGroup
      LoadBalancerArn: !Ref testElb
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08

#--------------------------------------------------------------------------------------------
# Redis instance
#--------------------------------------------------------------------------------------------
  testRedis:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      AutoMinorVersionUpgrade: false
      CacheNodeType: cache.t2.micro
      VpcSecurityGroupIds: 
      CacheSubnetGroupName: !Ref testRedisSubnet
      Engine: redis
      EngineVersion: 3.2.10
      NumCacheNodes: 1
      Port: 6379
      SnapshotRetentionLimit: 0
      VpcSecurityGroupIds: 
        - Ref: testRedisSecGroup
#--------------------------------------------------------------------------------------------
# PostgreSQL instance
#--------------------------------------------------------------------------------------------
  testdb:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20      # db storage(GB)
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: false
      BackupRetentionPeriod: 0
      CopyTagsToSnapshot: false
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: test-db
      DBSubnetGroupName: !Ref testRdsSubnet
      DeletionProtection: false
      Engine: postgres
      EngineVersion: 9.6.11
      MasterUsername: master
      MasterUserPassword: xx745133483
      MonitoringInterval: 0
      MultiAZ: true
      Port: 5432
      PubliclyAccessible: false
      VPCSecurityGroups: 
        - Ref: testRdsSecGroup
#--------------------------------------------------------------------------------------------
# AutoScaling LaunchConfiguration
#--------------------------------------------------------------------------------------------
  testLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      ImageId: ami-007b2c3a7b3239792
      InstanceMonitoring: false
      InstanceType: t2.medium
      KeyName: aws-shouer-gitlab
      LaunchConfigurationName: testLauConfig
      SecurityGroups: 
        - Ref: testEc2SecGroup
      # UserData: !Ref bootConfig
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: "8"
            VolumeType: "gp2"
            Iops: 100



